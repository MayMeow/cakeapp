<?php
namespace CakeNetworking\Controller;

use CakeNetworking\Controller\AppController;
use MayMeow\Logging\CloudLogTemplate;
use MayMeow\Resources\ResourcesManager;

/**
 * Domains Controller
 *
 * @property \CakeNetworking\Model\Table\DomainsTable $Domains
 */
class DomainsController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadComponent('MCloudLogging.CloudLog', [
            'package' => 'CakeNetworking',
            'domain' => 'Domains',
        ]);
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users']
        ];
        $domains = $this->paginate($this->Domains);

        /**
         * Cloud LOG
         */
        $this->CloudLog->template()->setResource()
            ->action('Index');


        $this->CloudLog->template()->setEventType('INDEX');
        $this->CloudLog->template()->setAuthor($this->Auth->user('username'));
        $this->CloudLog->create('debug', $domains);

        $this->set(compact('domains'));
        $this->set('_serialize', ['domains']);
    }

    /**
     * View method
     *
     * @param string|null $id Domain id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $domain = $this->Domains->get($id, [
            'contain' => [
                'Users',
                'DnsRecordSets' => ['DnsValues']
            ],
            //'order' => ['DnsRecordSets.type ASC']
        ]);

        /**
         * Cloud LOG
         */
        $this->CloudLog->template()->setResource()
            ->action('View')->id($domain->id);


        $this->CloudLog->template()->setEventType('VIEW');
        $this->CloudLog->template()->setAuthor($this->Auth->user('username'));
        $this->CloudLog->create('debug', $domain);

        $this->set('domain', $domain);
        $this->set('_serialize', ['domain']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $domain = $this->Domains->newEntity();
        if ($this->request->is('post')) {
            $domain = $this->Domains->patchEntity($domain, $this->request->data);
            $domain->user_id = $this->Auth->user('id');
            $domain->domain_key = '';
            if ($this->Domains->save($domain)) {
                $this->Flash->success(__('The domain has been saved.'));

                $resourceManager = new ResourcesManager();

                $response = $resourceManager->create([
                    'name' => $domain->name,
                    'resourceClass'=> 'CakeNetworking.Domains',
                    'userId' => $this->Auth->user('id'),
                    'instanceKey' => $domain->id,
                    'resourceGroup' => $domain->resource_group
                ]);

                // And Create SOA record in DNS
                $this->_createSoaRecord($domain->id);


                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The domain could not be saved. Please, try again.'));
            }
        }
        $users = $this->Domains->Users->find('list', ['limit' => 200]);

        $groupsModel = $this->loadModel('McloudResources.ResourceGroups');
        $groups = $groupsModel->find('list', ['limit' => 200]);
        //$groups->cache('modelGroups', 'redis');
        $this->set(compact('domain', 'users', 'groups'));
        $this->set('_serialize', ['domain']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Domain id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $domain = $this->Domains->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $domain = $this->Domains->patchEntity($domain, $this->request->data);
            if ($this->Domains->save($domain)) {
                $this->Flash->success(__('The domain has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The domain could not be saved. Please, try again.'));
            }
        }
        $users = $this->Domains->Users->find('list', ['limit' => 200]);
        $this->set(compact('domain', 'users'));
        $this->set('_serialize', ['domain']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Domain id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $domain = $this->Domains->get($id);
        if ($this->Domains->delete($domain)) {
            $this->Flash->success(__('The domain has been deleted.'));
        } else {
            $this->Flash->error(__('The domain could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    protected function _createSoaRecord($id = null)
    {
        $soa_template ='ns1.maymeow.cloud. ns-hostmaster.maymeow.cloud. 1 21600 3600 259200 300';

        $DnsModel = $this->loadModel('CakeNetworking.DnsRecordSets');
        $SOA = $DnsModel->newEntity();
        $SoaValue = $DnsModel->DnsValues->newEntity();

        $SoaValue->name = $soa_template;

        $SOA->dns_name = '@';
        $SOA->type = 'SOA';
        $SOA->ttl = 21600;
        $SOA->domain_id = $id;
        $SOA->dns_values = [
            $SoaValue
        ];

        return $DnsModel->save($SOA);
    }
}
