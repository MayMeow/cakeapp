<?php
namespace MCloudResources\Controller;

use Cake\Event\Event;
use MayMeow\Crud\View\Menu\MenuItem;
use MayMeow\Generator\ProjectNameGenerator;
use MayMeow\IO\Arrays\HashMap;
use MCloudResources\Controller\AppController;

/**
 * ResourceGroups Controller
 *
 * @property \MCloudResources\Model\Table\ResourceGroupsTable $ResourceGroups
 */
class ResourceGroupsController extends AppController
{

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->set('crud_admin_menu', $this->_adminMenu());
    }

    protected function _viewMenu($params = null)
    {
        return [
            new MenuItem('Repositories', ['action' => 'view', $params['slug']]),
            new MenuItem('People', ['action' => 'view', $params['slug'], 'people']),
            new MenuItem('Rooms', ['action' => 'view', $params['slug'], 'rooms']),
            new MenuItem('Projects', ['action' => 'view', $params['slug'], 'projects']),
            new MenuItem('Buckets', ['action' => 'view', $params['slug'], 'buckets']),
            new MenuItem('<i class="fa fa-cog"></i>', ['action' => 'edit', $params['id']])
        ];
    }

    /**
     * @param $user
     * @return bool
     */
    public function isAuthorized($user) : bool
    {
        // Allow all users to list, view and add projects
        if (in_array($this->request->getParam('action'), ['view', 'add', 'index'])){
            if (isset($user['role']) && $user['role'] === 'user') {
                return true;
            }
        }

        if (in_array($this->request->getParam('action'), ['edit', 'delete', 'addMember'])){
            $id = $this->request->getParam('pass.0');
            if ($this->ResourceGroups->isOwnedBy($id, $user['id'])) {
                return true;
            }
        }

        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users']
        ];
        $resourceGroups = $this->paginate($this->ResourceGroups);

        $this->set(compact('resourceGroups'));
        $this->set('_serialize', ['resourceGroups']);
    }

    /**
     * View method
     *
     * @param string|null $slug Resource Group id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($slug = null, $section = null)
    {
        $resourceGroup = $this->ResourceGroups->findBySlug($slug)
            ->contain(['Users', 'People', 'Buckets'])
            ->first();

        if ($section != null) $this->viewBuilder()->setTemplate($section . '_view');

        $btnViemMenu = $this->_viewMenu(['id' => $resourceGroup->id, 'slug' => $resourceGroup->slug, 'section' => $section]);

        $viewStack = new HashMap();
        $viewStack->put('section', $section)
            ->put('btnViemMenu', $btnViemMenu);

        $this->set('resourceGroup', $resourceGroup);
        $this->set('viewStack', $viewStack);
        $this->set('_serialize', ['resourceGroup']);


    }

    public function addMember($id = null)
    {
        $resourceGroup = $this->ResourceGroups->get($id, [
            'contain' => []
        ]);

        $this->loadModel('ResourceGroupsUsers');
        $resourceGroupMember = $this->ResourceGroupsUsers->newEntity();

        if ($this->request->is('post')) {

            $resourceGroupMember->user_id = $this->request->getData('member_id');
            $resourceGroupMember->resource_group_id = $resourceGroup->id;
            $resourceGroupMember->role = $this->request->getData('role');

            if ($this->ResourceGroupsUsers->save($resourceGroupMember)) {
                $this->Flash->success(__('The resource group has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The resource group could not be saved. Please, try again.'));
        }

        $users = $this->ResourceGroups->Users->find('list', ['limit' => 200]);
        $this->set(compact('resourceGroupMember', 'users'));
        $this->set('_serialize', ['resourceGroupMember']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $resourceGroup = $this->ResourceGroups->newEntity();

        $ng = new ProjectNameGenerator();
        $ng->number = true;
        $resourceGroup->name = $ng->dashed();

        if ($this->request->is('post')) {
            $resourceGroup = $this->ResourceGroups->patchEntity($resourceGroup, $this->request->data);
            $resourceGroup->uid = '';
            $resourceGroup->user_id = $this->Auth->user('id');
            $resourceGroup->slug = $resourceGroup->name;
            if ($this->ResourceGroups->save($resourceGroup)) {
                $this->Flash->success(__('The resource group has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The resource group could not be saved. Please, try again.'));
        }
        $users = $this->ResourceGroups->Users->find('list', ['limit' => 200]);
        $this->set(compact('resourceGroup', 'users'));
        $this->set('_serialize', ['resourceGroup']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Resource Group id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $resourceGroup = $this->ResourceGroups->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $resourceGroup = $this->ResourceGroups->patchEntity($resourceGroup, $this->request->data);
            if ($this->ResourceGroups->save($resourceGroup)) {
                $this->Flash->success(__('The resource group has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The resource group could not be saved. Please, try again.'));
        }
        $users = $this->ResourceGroups->Users->find('list', ['limit' => 200]);
        $this->set(compact('resourceGroup', 'users'));
        $this->set('_serialize', ['resourceGroup']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Resource Group id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $resourceGroup = $this->ResourceGroups->get($id);
        if ($this->ResourceGroups->delete($resourceGroup)) {
            $this->Flash->success(__('The resource group has been deleted.'));
        } else {
            $this->Flash->error(__('The resource group could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
