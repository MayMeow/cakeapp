<?php
namespace CakeAuth\Controller;

use Cake\Event\Event;
use CakeApp\Component\Core\Helper\RoleHelper;
use CakeAuth\Controller\AppController;

/**
 * Users Controller
 *
 * @property \CakeAuth\Model\Table\UsersTable $Users
 */
abstract class AbstractUsersController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('CakeFile.Uploader', [
            'upload_domain' => 'users',
            'upload_dir' => 'images',
            'allowed' => ['png', 'jpg', 'jpeg', 'gif']
        ]);
    }

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);
        $this->Auth->allow(['add', 'logout']);
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $users = $this->paginate($this->Users);

        $this->set(compact('users'));
        $this->set('_serialize', ['users']);
    }

    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => []
        ]);

        $this->set('user', $user);
        $this->set('_serialize', ['user']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $user = $this->Users->newEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->data);
            $user->verified = true;
            $user->uid = '';
            $user->role = RoleHelper::USER_ROLE;
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'), [
                    'plugin' => 'CakeBootstrap'
                ]);

                // first user must be admin
                if ($user->id == '1') {
                    $user->role = RoleHelper::ADMIN_ROLE;
                    $this->Users->save($user);
                }

                $this->_initializeProfile($user->id, $user->username);

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The user could not be saved. Please, try again.'), [
                    'plugin' => 'CakeBootstrap'
                ]);
            }
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['user']);
    }

    /**
     * @param null $id
     * @param null $username
     * @return bool
     */
    protected function _initializeProfile($id = null, $username = null)
    {
        $this->loadModel('CakeAuth.Profiles');
        $profile = $this->Profiles->newEntity();
        $profile->name = $username;
        $profile->user_id = $id;

        if ($this->Profiles->save($profile)) {
            return true;
        }

        return false;
    }

    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->data);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'), [
                    'plugin' => 'CakeBootstrap'
                ]);

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The user could not be saved. Please, try again.'), [
                    'plugin' => 'CakeBootstrap'
                ]);
            }
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['user']);
    }

    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'), [
                'plugin' => 'CakeBootstrap'
            ]);
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'), [
                'plugin' => 'CakeBootstrap'
            ]);
        }

        return $this->redirect(['action' => 'index']);
    }

    public function updateImage($id = null)
    {
        $user = $this->Users->get($id);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->data);

            // add starting slash, data are located in webroot
            $imagePath = DS . $this->Uploader->upload($user->image_file);
            $user->image = str_replace("\\", "/", $imagePath);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The node has been saved.'), [
                    'plugin' => 'CakeBootstrap'
                ]);
                return $this->redirect(['action' => 'view', $id]);
            }
        }
    }
}
