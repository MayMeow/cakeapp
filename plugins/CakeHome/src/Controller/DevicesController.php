<?php

namespace MCloudHome\Controller;

use Cake\Core\Configure;
use Cake\Event\Event;
use MayMeow\Crud\View\Menu\MenuItem;
use MayMeow\Db\MayDb;
use MayMeow\Generator\RandomStringGenerator;
use MayMeow\Templates\Config\AgentConfig;
use MayMeow\Templates\Config\OutgoingActionConfig;

/**
 * Devices Controller
 *
 * @property \MCloudHome\Model\Table\DevicesTable $Devices
 */
class DevicesController extends AbstractDevicesController
{
    public function isAuthorized($user) : bool
    {
        // Allow view, play, stop for Users
        if (in_array($this->request->getParam('action'), ['view', 'play', 'stop', 'index'])) {
            if (isset($user['role']) && $user['role'] === 'user') {
                return true;
            }
        }

        return parent::isAuthorized($user);
    }

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->set('crud_admin_menu', $this->_adminMenu());
    }



    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $device = $this->Devices->newEntity();
        if ($this->request->is('post')) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());

            $device->app_key = RandomStringGenerator::generate(20);
            $device->app_secret = RandomStringGenerator::generate(40);

            $device->agent_type = 'audio';

            if ($this->Devices->save($device)) {
                $this->Flash->success(__('The device has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The device could not be saved. Please, try again.'));
        }
        $this->set(compact('device'));
        $this->set('_serialize', ['device']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Device id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());
            if ($this->Devices->save($device)) {
                $this->Flash->success(__('The device has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The device could not be saved. Please, try again.'));
        }
        $this->set(compact('device'));
        $this->set('_serialize', ['device']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Device id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $device = $this->Devices->get($id);
        if ($this->Devices->delete($device)) {
            $this->Flash->success(__('The device has been deleted.'));
        } else {
            $this->Flash->error(__('The device could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * @param null $id
     * @return \Cake\Http\Response|null
     */
    public function restart($id = null)
    {
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);

        $payload = new OutgoingActionConfig();
        $payload->setAction('Restart');

        $this->_createAction($payload, $device->app_key, $device->app_secret);

        return $this->redirect($this->referer());
    }
}
