<?php
namespace CakeLogs\Controller;

use Cake\Event\Event;
use MayMeow\Crud\View\Menu\MenuItem;
use CakeLogs\Controller\AppController;

/**
 * CloudLogs Controller
 *
 * @property \CakeLogs\Model\Table\CloudLogsTable $CloudLogs
 */
abstract class AbstractCloudLogsController extends AppController
{

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->set('crud_admin_menu', $this->_adminMenu());
    }

    /**
     * Method _adminMenu
     *
     * @return array
     */
    protected function _adminMenu()
    {
        return [
            new MenuItem('<i class="fa fa-dashboard"></i> Logs', ['action' => 'index', 'controller' => 'CloudLogs'], ['escape' => false]),
        ];
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $cloudLogs = $this->paginate($this->CloudLogs);

        $this->set(compact('cloudLogs'));
        $this->set('_serialize', ['cloudLogs']);
    }

    /**
     * View method
     *
     * @param string|null $id Cloud Log id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $cloudLog = $this->CloudLogs->get($id, [
            'contain' => []
        ]);

        $logData = json_decode($cloudLog->json_data);

        $this->set('logData', $logData);
        $this->set('cloudLog', $cloudLog);
        $this->set('_serialize', ['cloudLog']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $cloudLog = $this->CloudLogs->newEntity();
        if ($this->request->is('post')) {
            $cloudLog = $this->CloudLogs->patchEntity($cloudLog, $this->request->data);
            if ($this->CloudLogs->save($cloudLog)) {
                $this->Flash->success(__('The cloud log has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The cloud log could not be saved. Please, try again.'));
        }
        $this->set(compact('cloudLog'));
        $this->set('_serialize', ['cloudLog']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Cloud Log id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $cloudLog = $this->CloudLogs->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $cloudLog = $this->CloudLogs->patchEntity($cloudLog, $this->request->data);
            if ($this->CloudLogs->save($cloudLog)) {
                $this->Flash->success(__('The cloud log has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The cloud log could not be saved. Please, try again.'));
        }
        $this->set(compact('cloudLog'));
        $this->set('_serialize', ['cloudLog']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Cloud Log id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $cloudLog = $this->CloudLogs->get($id);
        if ($this->CloudLogs->delete($cloudLog)) {
            $this->Flash->success(__('The cloud log has been deleted.'));
        } else {
            $this->Flash->error(__('The cloud log could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
