<?php
namespace CakeStorage\Controller;

use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\Filesystem\File;
use Cake\Filesystem\Folder;
use Cake\Routing\Router;
use CakeStorage\Controller\AppController;
use MayMeow\Resources\ResourcesManager;

/**
 * Buckets Controller
 *
 * @property \CakeStorage\Model\Table\BucketsTable $Buckets
 */
class BucketsController extends AppController
{
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow(['add', 'index', 'view']);

        $this->set('crud_admin_menu', $this->_adminMenu());
    }

    public function isAuthorized($user) : bool
    {
        // Allow all users to list, view and add projects
        if (in_array($this->request->getParam('action'), ['view', 'add', 'index', 'blob'])){
            if (isset($user['role']) && $user['role'] === 'user') {
                return true;
            }
        }

        if (in_array($this->request->getParam('action'), ['edit', 'delete'])){
            $id = $this->request->getParam('pass.0');
            if ($this->Buckets->isOwnedBy($id, $user['id'])) {
                return true;
            }
        }

        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('RequestHandler');
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $buckets = $this->paginate($this->Buckets);

        $this->set(compact('buckets'));
        $this->set('_serialize', ['buckets']);
    }

    /**
     * View method
     *
     * @param string|null $id Bucket id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null, $folder = null)
    {
        $bucket = $this->Buckets->get($id, [
            'contain' => []
        ]);

        $bucketFolder = Configure::read('CakeApp.Buckets.paths');

        if ($folder == null) {
            $dir = new Folder($bucketFolder['hdd1-local'] . $bucket->uid);
        } else {
            $dir = new Folder($bucketFolder['hdd1-local'] . $bucket->uid . DS . $folder);
        }

        $files = $dir->read();

        $size = $dir->dirsize();

        $pwd = $dir->pwd();

        $pricePerGb = Configure::read('CakeStorage.bucketPrice');
        $price = ($size / (1024*1024*1024)) * (float)$pricePerGb;

        $found_files = [];

        foreach ($files[1] as $file) {
            $file = new File($dir->pwd() . DS .$file);
            $found_files[] = $file->info();
            // $file->write('I am overwriting the contents of this file');
            // $file->append('I am adding to the bottom of this file.');
            // $file->delete(); // I am deleting this file
            $file->close(); // Be sure to close the file when you're done
        }

        $rsyncUrl = Configure::read('CodeAdvent.externalUrl');
        $rsyncPort = Configure::read('CakeStorage.rsyncPort');
        $this->set('pwd', $pwd);
        $this->set('folderPath', $folder);
        $this->set('dirprice', $price);
        $this->set('dirsize', $size);
        $this->set('files', $found_files);
        $this->set('dirs', $files[0]);
        $this->set('bucket', $bucket);
        $this->set('_serialize', ['bucket']);
    }

    public function blob($id = null, $filePath = null)
    {
        $bucket = $this->Buckets->get($id, [
            'contain' => []
        ]);
        $bucketPath = DATASTORE . 'buckets' . DS . $bucket->uid;
        $path = $bucketPath . '/' . $filePath;

        $this->set('filePath', $filePath);
        $this->set('fileContent', file_get_contents($path));
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $bucket = $this->Buckets->newEntity();

        $bucketFolder = Configure::read('CakeApp.Buckets.paths.buckets-data');

        if ($this->request->is('post')) {
            $bucket = $this->Buckets->patchEntity($bucket, $this->request->data);
            $bucket->uid = '';
            $bucket->user_id = $this->Auth->user('id');
            if ($this->Buckets->save($bucket)) {

                //create data folder after creation bucket
                $this->_folderExists($bucketFolder[0] . $bucket->uid);
                $this->Flash->success(__('The bucket has been saved.'));

                // $resourceManager = new ResourcesManager();
                //
                // $response = $resourceManager->create([
                //     'name' => $bucket->name,
                //     'resourceClass'=> 'CakeStorage.Buckets',
                //     'userId' => $this->Auth->user('id'),
                //     'instanceKey' => $bucket->id,
                //     'resourceGroup' => $bucket->resource_group
                // ]);

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The bucket could not be saved. Please, try again.'));
            }
        }

        $groupsModel = $this->loadModel('CakeResource.Projects');
        $groups = $groupsModel->find('list', ['limit' => 200]);
        $this->set(compact('bucket', 'groups'));
        $this->set('_serialize', ['bucket']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Bucket id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $bucket = $this->Buckets->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $bucket = $this->Buckets->patchEntity($bucket, $this->request->data);
            if ($this->Buckets->save($bucket)) {
                $this->Flash->success(__('The bucket has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The bucket could not be saved. Please, try again.'));
            }
        }
        $this->set(compact('bucket'));
        $this->set('_serialize', ['bucket']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Bucket id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $bucket = $this->Buckets->get($id);
        if ($this->Buckets->delete($bucket)) {
            $this->Flash->success(__('The bucket has been deleted.'));
        } else {
            $this->Flash->error(__('The bucket could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * _folderExists method Check if exists folder for upload and if false create one.
     * @param null $folderPath
     */
    private function _folderExists($folderPath = null) {
        $folder = new Folder('/');
        if (!$folder->cd($folderPath)) {
            $folder->create($folderPath);
        }
    }
}
