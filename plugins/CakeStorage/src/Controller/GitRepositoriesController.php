<?php
namespace CakeStorage\Controller;

use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\Filesystem\Folder;
use Cake\ORM\TableRegistry;
use Cake\Utility\Text;
use CakeStorage\Controller\AppController;
use MayMeow\Crud\View\Menu\MenuItem;
use MayMeow\Git\GitRepository;
use MayMeow\IO\Arrays\ArrayList;
use MayMeow\IO\Arrays\HashMap;
use Symfony\Component\Process\Process;

/**
 * GitRepositories Controller
 *
 * @property \CakeStorage\Model\Table\GitRepositoriesTable $GitRepositories
 *
 * @method \CakeStorage\Model\Entity\GitRepository[] paginate($object = null, array $settings = [])
 */
class GitRepositoriesController extends AppController
{

    protected function _viewMenu($params = null)
    {
        return [
            new MenuItem('Project', ['action' => 'view', $params['username'], $params['slug'], 'tree']),
            new MenuItem('Commits', ['action' => 'view', $params['username'], $params['slug'], 'commits']),
            new MenuItem('Branches', ['action' => 'view', $params['username'], $params['slug'], 'branches']),
            new MenuItem('Tags', ['action' => 'view', $params['username'], $params['slug'], 'tags']),
            new MenuItem('<i class="fa fa-cog"></i>', ['action' => 'edit', $params['id']])
        ];
    }

    public function isAuthorized($user) : bool
    {
        // Allow all users to list, view and add projects
        if (in_array($this->request->getParam('action'), ['view', 'add', 'index', 'blob'])){
            if (isset($user['role']) && $user['role'] === 'user') {
                return true;
            }
        }

        if (in_array($this->request->getParam('action'), ['edit', 'delete'])){
            $id = $this->request->getParam('pass.0');
            if ($this->GitRepositories->isOwnedBy($id, $user['id'])) {
                return true;
            }
        }

        return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }

    protected function _getRepositoryId($namespace, $slug)
    {
        $gitRepository = $this->GitRepositories->findBySlug($slug)
            ->contain(['Users'])
            ->select(['id'])
            ->where(['GitRepositories.namespace LIKE' => $namespace])
            ->first();

        return $gitRepository->id;
    }

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        //$this->Auth->allow(['add', 'index', 'view']);

        $this->set('crud_admin_menu', $this->_adminMenu());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users'],
            'order' => ['GitRepositories.created DESC']
        ];
        $gitRepositories = $this->paginate($this->GitRepositories);

        $this->set(compact('gitRepositories'));
        $this->set('_serialize', ['gitRepositories']);
    }

    /**
     * View method
     *
     * @param string|null $namespace Git Repository id.
     * @param string|null $path
     * @param string|null $slug
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($namespace = null, $slug = null, $section = null, $path = null)
    {
        if ($section == null) $this->redirect(['action' => 'view', $namespace, $slug, 'tree']);

        $gitRepository = $this->GitRepositories->findBySlug($slug)
            ->contain(['Users'])
            ->where(['GitRepositories.namespace LIKE' => $namespace])
            ->first();

        if ($section != 'tree') $this->viewBuilder()->setTemplate($section . '_view');

        // Check if there is set default branch
        $gitRepository->default_branch ? $ref = $gitRepository->default_branch : $ref = 'HEAD';
        if ($path != null) $ref .= ':'. $path;

        $viewSack = new HashMap();
        $viewSack->put('clone', $this->_getCloneUrl($gitRepository->namespace, $gitRepository->slug))
            ->put('publicClone', 'soon')
            ->put('ref', $ref)
            ->put('projectWithNamespace', $gitRepository->namespace . DS . $gitRepository->slug . '.git');

        $btnViewMenu = $this->_viewMenu(['username' => $gitRepository->namespace, 'slug' => $gitRepository->slug, 'id' => $gitRepository->id]);

        //$this->set('tree', $tree);
        $this->set('viewSack', $viewSack);
        $this->set('view_menu', $btnViewMenu);
        $this->set('gitRepository', $gitRepository);
        $this->set('_serialize', ['gitRepository', 'tree']);
    }

    /**
     * @param $username
     * @param $slug
     * @return string
     */
    protected function _getCloneUrl($username, $slug)
    {
        $externalUrl = Configure::read('CakeApp.Git.externalUrl');
        $port = Configure::read('CakeApp.Git.port');

        if($port != '22') {
            return $clone = 'ssh://git@' . $externalUrl . ':' . $port . '/~git/' . $username . '/' . $slug . '.git';
        }

        return $clone = 'git@' . $externalUrl . ':' . $username . '/' . $slug . '.git';
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $gitRepository = $this->GitRepositories->newEntity();

        if ($this->request->is('post')) {
            $gitRepository = $this->GitRepositories->patchEntity($gitRepository, $this->request->getData());

            // Set UID  and Slug
            $gitRepository->uid = Text::uuid();
            $gitRepository->user_id = $this->Auth->user('id');
            $gitRepository->slug = '';
            $gitRepository->default_branch = 'master';

            if ($this->GitRepositories->save($gitRepository)) {
                $this->Flash->success(__('The git repository has been saved.'));

                $repositoryName = $gitRepository->namespace . DS . $gitRepository->slug . '.git';

                $repo = new GitRepository($repositoryName);
                $repo->initBare();

                $this->_addHooks($repo->getRepositoryPath());

                // set access rights
                $dir = new Folder();
                $dir->chmod($repo->getRepositoryPath(), 0777, true);

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The git repository could not be saved. Please, try again.'));
        }
        $users = $this->GitRepositories->Users->find('list', ['limit' => 200]);
        $this->set('namespaces', $this->_getNamespaces());
        $this->set(compact('gitRepository', 'users'));
        $this->set('_serialize', ['gitRepository']);
    }

    /**
     * @return array
     */
    protected function _getNamespaces()
    {
        $usersTable = TableRegistry::get('Users');
        $groupTable = TableRegistry::get('ResourceGroups');

        $users = $usersTable->find('list', [
            'keyField' => 'username',
            'valueField' => 'username',
        ])->where(['Users.id' => $this->Auth->user('id')]);
        $groups = $groupTable->find('list', [
            'keyField' => 'slug',
            'valueField' => 'name',
        ])->where(['ResourceGroups.user_id' => $this->Auth->user('id')]);

        return array_merge($users->toArray(), $groups->toArray());
    }

    /**
     * @param $repositoryPath
     */
    protected function _addHooks($repositoryPath)
    {
        //$file = new File(CAKE_LIB . 'post-update.php');
        //$file->copy($repositoryPath . DS  . 'hooks' . DS . 'post-update');

        $folder = new Folder();
        $folder->chmod(CAKEAPP_SHELL_HOOKS, 0775, true);


        $hook = CAKEAPP_SHELL_HOOKS . 'PostUpdateHook.php';
        $repo = $repositoryPath . DS  . 'hooks' . DS . 'post-update';

        $process = new Process('ln -s ' . $hook . ' ' . $repo);
        $process->run();

        $process = new Process('chmod +x ' . $repo);
        $process->run();
    }


    /**
     * _folderExists method Check if exists folder for upload and if false create one.
     * @param null $folderPath
     */
    protected function _folderExists($folderPath = null) {
        $folder = new Folder('/');
        if (!$folder->cd($folderPath)) {
            $folder->create($folderPath);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Git Repository id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $gitRepository = $this->GitRepositories->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $gitRepository = $this->GitRepositories->patchEntity($gitRepository, $this->request->getData());
            if ($this->GitRepositories->save($gitRepository)) {
                $this->Flash->success(__('The git repository has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The git repository could not be saved. Please, try again.'));
        }
        $users = $this->GitRepositories->Users->find('list', ['limit' => 200]);
        $this->set(compact('gitRepository', 'users'));
        $this->set('_serialize', ['gitRepository']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Git Repository id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $gitRepository = $this->GitRepositories->get($id);

        // set repository and get path to folder
        $repo = new GitRepository($gitRepository->namespace . DS . $gitRepository->slug . '.git');
        $dir = new Folder($repo->getRepositoryPath());

        // try delete folder and if success remove project from database
        //shell_exec('sudo -u git rm -r ' . $repo->getRepositoryPath());

        $process = new Process('rm -r ' . $repo->getRepositoryPath());
        $process->run();

        if ($process->isSuccessful()) {
            if ($this->GitRepositories->delete($gitRepository)) {
                $this->Flash->success(__('The git repository has been deleted.'));
            } else {
                $this->Flash->error(__('The git repository could not be deleted. Please, try again.'));
            }
        } else {
            $this->Flash->error(__('Could not delete project folder. Try again later.'));
        }
        return $this->redirect(['action' => 'index']);
    }

    public function blob($namespace = null, $slug = null, $sha = null)
    {
        $gitRepository = $this->GitRepositories->findBySlug($slug)
            ->contain(['Users'])
            ->where(['GitRepositories.namespace LIKE' => $namespace])
            ->first();


        $repo = new GitRepository($gitRepository->namespace . DS . $gitRepository->slug . '.git');
        if ($repo->isEmpty()) {
            $output = null;
        } else {
            $output = $repo->outputRawContent($sha);
        }
        $btnViewMenu = $this->_viewMenu(['username' => $gitRepository->namespace, 'slug' => $gitRepository->slug, 'id' => $gitRepository->id]);

        $this->set('view_menu', $btnViewMenu);
        $this->set('output', $output);
        //$this->set('fileName', $fileName);
        $this->set('gitRepository', $gitRepository);
        $this->set('_serialize', ['gitRepository']);
    }
}
